import { FC, ReactElement, useEffect, useRef, useState } from "react";
import { Link, NavLink } from "react-router-dom";
import { GrSchedule } from "react-icons/gr";
import { IoDocumentTextOutline, IoSettingsOutline, IoExitOutline } from "react-icons/io5";
import { LuUser2 } from "react-icons/lu";
import { RxDashboard } from "react-icons/rx";
import { FaLaptopCode } from "react-icons/fa";
import { TbReportSearch } from "react-icons/tb";

interface INavLinks {
    name: string;
    pathname: string;
    icon: ReactElement<any, any>;
}

const Sidebar: FC = () => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const menuRef = useRef<HTMLDivElement | null>(null);
    const menuToggleButtonRef = useRef<HTMLDivElement>(null);

    // role
    const role = "user";

    // navlinks for admin
    const navlinksAdmin: INavLinks[] = [
        { name: "Dashboard", pathname: "/dashboard/home", icon: <RxDashboard /> },
        { name: "Schedule", pathname: "/dashboard/schedule", icon: <GrSchedule /> },
        { name: "Users", pathname: "/dashboard/users", icon: <LuUser2 /> },
        { name: "Invoices", pathname: "/dashboard/invoices", icon: <IoDocumentTextOutline /> },
        { name: "Labs", pathname: "/dashboard/labs", icon: <FaLaptopCode /> },
        { name: "Reports", pathname: "/dashboard/reports", icon: <TbReportSearch /> },
        { name: "Admin Settings", pathname: "/dashboard/admin-settings", icon: <IoSettingsOutline /> },
    ];

    // navlinks for user
    const navlinksUser: INavLinks[] = [
        { name: "User Profile", pathname: "/dashboard/user/profile", icon: <RxDashboard /> },
        { name: "Projects", pathname: "/dashboard/user/projects", icon: <GrSchedule /> },
        { name: "Resources", pathname: "/dashboard/user/resources", icon: <LuUser2 /> },
        { name: "Leader board", pathname: "/dashboard/user/leaderboard", icon: <IoDocumentTextOutline /> }
    ];

    const navLinks = role !== "user" ? navlinksUser : navlinksAdmin;


    // dropdown manu handler
    const handleMenuToggler = () => {
        setIsMenuOpen(pre => !pre);
    }


    // user menu outside click handler
    const handleClickOutside = (event: Event) => {
        if (menuRef.current && !menuRef.current.contains(event.target as Node) && menuToggleButtonRef.current && !menuToggleButtonRef.current.contains(event.target as Node)) {
            setIsMenuOpen(false);
        }
    };


    // menu outside click handler
    useEffect(() => {
        // Add the event listener when the component mounts
        document.addEventListener("mousedown", handleClickOutside);
        // Remove the event listener when the component unmounts
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);


    return (
        <div className="lg:w-[336px] w-full bg-[#4740583B] lg:min-h-screen relative lg:rounded-r-[32px] lg:py-11 py-6 px-5 flex flex-col lg:sticky lg:top-0 ">
            <div className="flex-1">
                <div className="flex items-center justify-between">
                    {/* logo section start */}
                    <Link to='/'>
                        <img src='/svg/logo-with-text.svg' alt='logo' className='lg:h-10 mx-auto' />
                    </Link>
                    {/* logo section start */}
                    {/* dropdown button start */}
                    <div ref={menuToggleButtonRef} className='lg:hidden'>
                        <div>
                            <input
                                onChange={handleMenuToggler}
                                checked={isMenuOpen}
                                type="checkbox" id="checkbox" />
                            <label htmlFor="checkbox" className="toggle">
                                <div className="bars" id="bar1"></div>
                                <div className="bars" id="bar2"></div>
                                <div className="bars" id="bar3"></div>
                            </label>
                        </div>
                    </div>
                    {/* dropdown button end */}
                </div>

                {/* navlinks for larger devices start */}
                <div className="hidden flex-col my-14 gap-4 lg:flex">
                    {
                        navLinks.map((navlink, indx) =>
                            <NavLink
                                key={indx}
                                to={navlink.pathname}
                                className={({ isActive }) => {
                                    return isActive
                                        ? 'text-white font-medium primary-btn-col py-4 px-8 rounded-2xl text-lg duration-300 flex items-center justify-start gap-2'
                                        : 'text-[#FFFFFFB2] font-medium hover:text-white py-4 px-8 rounded-2xl text-lg duration-300 flex items-center justify-start gap-2';
                                }}
                            >
                                {navlink.icon}
                                {navlink.name}
                            </NavLink>
                        )
                    }
                </div>
                {/* navlinks for larger devices end */}

                {/* navlinks for smaller devices start */}
                <div
                    ref={menuRef}
                    className={`absolute lg:hidden right-0 top-[100px] z-[60] w-[70%] max-w-72 mx-auto rounded-b-[8px] origin-top duration-300 ${isMenuOpen ? "scale-y-100" : "scale-y-0"} blur-background flex flex-col gap-6 backdrop-blur-xl px-6 py-6`} >
                    {navLinks.map(({ name, pathname }, indx) => (
                        <NavLink
                            key={indx}
                            to={pathname}
                            onClick={handleMenuToggler}
                            className={({ isActive }) => {
                                return isActive
                                    ? 'text-white font-semibold'
                                    : 'text-gray-400 hover:text-white';
                            }}
                        >
                            {name}
                        </NavLink>
                    ))}
                    <button
                        className='w-full flex items-center justify-center gap-3 py-3 text-sm text-center bg-secondary font-semibold rounded-md border border-secondary'
                    >
                        <IoExitOutline className="w-6 h-6" />

                        Logout
                    </button>
                </div>
                {/* navlinks for smaller devices end */}
            </div>
            {/* logout button */}
            <div className="lg:flex items-center font-medium justify-start gap-4 text-[#FFFFFF9E] hover:text-white py-5 px-12 rounded-2xl text-lg duration-300 hidden">
                <IoExitOutline />
                <button className="">Log Out</button>
            </div>
            {/* logout button */}
        </div>
    );
};

export default Sidebar;